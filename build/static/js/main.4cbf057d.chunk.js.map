{"version":3,"sources":["utils/repository.js","components/controls.js","utils/theme.js","components/cards.js","components/snackbar.js","App.js","serviceWorker.js","index.js"],"names":["EmojiRepository","POSITIVE_REINFORCEMENTS","NEGATIVE_REINFORCEMENTS","MESSAGE_SAME_CARD","checkCardLimits","presentCardCount","FloatingLayout","styled","div","props","theme","colorSeconday","primaryBoxShadow","radius","padding","EmojiButton","button","Controls","useState","seconds","setSeconds","shouldTimerRun","padZeros","i","useEffect","interval","setInterval","clearInterval","onClick","setEmojiCount","emoji","setShouldTimerRun","showSnackbar","role","aria-label","description","style","width","m","Math","floor","s","getMinuteString","defaultProps","withTheme","colorPrimary","textColor","font","Card","Emoji","span","Cards","cards","setCards","firstSelectedItem","setFirstSelectedItem","score","setScore","emojiCount","temp","push","isActive","canBeClicked","array","temporaryValue","randomIndex","currentIndex","length","random","SHUFFLE_ARRAY","className","key","index","cardsCopy","handleCardClick","makeCard","SnackbarBody","Snackbar","message","App","snackbarState","setSnackbarState","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cbf057d.chunk.js","sourcesContent":["const CARD_UPPER_LIMIT = 16\nconst CARD_LOWER_LIMIT = 4\n\nexport const EmojiRepository = [\n  '🐷',\n  '🦉',\n  '🐏',\n  '🦌',\n  '🦠',\n  '🦔',\n  '🦃',\n  '🐪',\n  '🦀',\n  '🦐',\n  '🦀',\n  '🐡',\n  '🐢',\n  '🦖',\n  '🐙',\n  '🐌',\n  '🐮'\n]\n\nexport const POSITIVE_REINFORCEMENTS = [\n  \"You are smokn'g..🚬\",\n  'Fireeeeeeeeeee🔥',\n  'Somebody has been flawless lateley💅🏻',\n  'Are you a hacker?👨🏽‍💻',\n  'Never seen someone so perfect 🙈'\n]\n\nexport const NEGATIVE_REINFORCEMENTS = [\n  'Errr!! Are you even trying?👀',\n  'Quick fact, Almonds are good for memory🙈',\n  'Alert!! The system has been infected by noob9o1🐏',\n  'I bet if i give you the answer you would have forgot the question🤸‍♂️',\n  'I will find you and i will kill you 🦉',\n  'I have lost hope 🦛',\n  'You droped 🧠 in the backyard'\n]\n\nexport const MESSAGE_SAME_CARD = [\"What's up doc?🐰\"]\n\nexport const LIMIT_HIGH = 'Woahh!!! Slow down cowboy 🤙'\nexport const LIMIT_LOW = 'Are you sure you want to play? 😑'\n\nexport function SHUFFLE_ARRAY(array) {\n  const temp = array\n  let currentIndex = array.length\n  let temporaryValue\n  let randomIndex\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n\n    temporaryValue = array[currentIndex]\n    temp[currentIndex] = array[randomIndex]\n    temp[randomIndex] = temporaryValue\n  }\n\n  return temp\n}\n\nexport const checkCardLimits = (presentCardCount) => {\n  return !(\n    presentCardCount < CARD_LOWER_LIMIT || presentCardCount > CARD_UPPER_LIMIT\n  )\n}\n\nexport const getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n","import React, { useState, useEffect } from 'react'\nimport styled, { withTheme } from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { checkCardLimits, LIMIT_HIGH, LIMIT_LOW } from '../utils/repository'\n\nconst FloatingLayout = styled.div`\n  background: ${(props) => props.theme.colorSeconday};\n  box-shadow: ${(props) => props.theme.primaryBoxShadow};\n  display: block;\n  position: absolute;\n  width: 250px !important;\n  margin: auto;\n  left: 0;\n  right: 0;\n  text-align: centre;\n  border-radius: ${(props) => props.theme.radius};\n  padding: ${(props) => props.theme.padding};\n  margin-top: 2em;\n`\n\nconst EmojiButton = styled.button`\n  margin: 0 !important;\n  padding: 0.1em;\n  background: transparent;\n  border: none;\n  font-size: 1.6rem;\n  color: white;\n  font-family: 'Merriweather Sans', sans-serif;\n  font-weight: 900;\n  cursor: pointer;\n  -webkit-appearance: button;\n  outline: none !important;\n`\n\nfunction Controls(props) {\n  const [seconds, setSeconds] = useState(0)\n  const { shouldTimerRun } = props\n\n  const padZeros = (i) => {\n    return i < 10 ? `0${i}` : i\n  }\n\n  const getMinuteString = () => {\n    const m = padZeros(Math.floor(seconds / 60))\n    const s = padZeros(seconds % 60)\n\n    return `${m}:${s}`\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds + 1)\n    }, 1000)\n\n    if (!shouldTimerRun) clearInterval(interval)\n\n    return () => clearInterval(interval)\n  }, [seconds, shouldTimerRun])\n\n  const handleEmojiDecrease = () => {\n    props.setEmojiCount((emoji) => {\n      if (checkCardLimits(emoji - 1)) {\n        setSeconds(0)\n        props.setShouldTimerRun(true)\n        return emoji - 1\n      }\n      props.showSnackbar(LIMIT_LOW)\n      return emoji\n    })\n  }\n  const handleEmojiIncrease = () => {\n    props.setEmojiCount((emoji) => {\n      if (checkCardLimits(emoji + 1)) {\n        setSeconds(0)\n        props.setShouldTimerRun(true)\n        return emoji + 1\n      }\n      props.showSnackbar(LIMIT_HIGH)\n      return emoji\n    })\n  }\n\n  return (\n    <FloatingLayout>\n      <ul>\n        <li>\n          <EmojiButton onClick={handleEmojiDecrease}>\n            <span role=\"img\" aria-label=\"block\" description=\"remove cards\">\n              ⛔️\n            </span>\n          </EmojiButton>\n        </li>\n        <li style={{ width: '140px' }}>\n          &nbsp;&nbsp;&nbsp;{getMinuteString()}&nbsp;&nbsp;&nbsp;\n        </li>\n        <li>\n          <EmojiButton onClick={handleEmojiIncrease}>\n            <span role=\"img\" aria-label=\"block\" description=\"remove cards\">\n              ➕\n            </span>\n          </EmojiButton>\n        </li>\n      </ul>\n    </FloatingLayout>\n  )\n}\n\nControls.propTypes = {\n  showSnackbar: PropTypes.func,\n  setEmojiCount: PropTypes.func,\n  setShouldTimerRun: PropTypes.func,\n  shouldTimerRun: PropTypes.bool\n}\n\nControls.defaultProps = {\n  showSnackbar: null,\n  setEmojiCount: null,\n  setShouldTimerRun: null,\n  shouldTimerRun: true\n}\n\nexport default withTheme(Controls)\n","export default {\n  colorPrimary: '#131417',\n  colorSeconday: '#1d1e22',\n  primaryBoxShadow: '0 4px 30px rgba(0,0,0,.5)',\n  radius: '10px',\n  textColor: 'white',\n  font: \"'Merriweather Sans', sans-serif\",\n  padding: '1.5rem 1.5rem 2rem 1.5rem'\n}\n","import React, { useState, useEffect } from 'react'\nimport styled, { withTheme } from 'styled-components'\nimport PropTypes from 'prop-types'\nimport {\n  EmojiRepository,\n  SHUFFLE_ARRAY,\n  MESSAGE_SAME_CARD,\n  POSITIVE_REINFORCEMENTS,\n  NEGATIVE_REINFORCEMENTS\n} from '../utils/repository'\n\nconst Card = styled.div`\n  background: ${(props) => props.theme.colorSeconday};\n  box-shadow: ${(props) => props.theme.primaryBoxShadow};\n  border-radius: ${(props) => props.theme.radius};\n  padding: ${(props) => props.theme.padding};\n  color: white;\n  padding: 1rem;\n  height: 4rem;\n  text-align: center;\n  cursor: pointer;\n  transform: scale(1);\n  user-select: none;\n  transition: all 0.3s;\n\n  &:active {\n    transform: scale(0.95);\n    transition: transform 0.3s;\n  }\n\n  &.selected {\n    box-shadow: none !important;\n    background: #47cf73;\n    transform: scale(0.95);\n  }\n`\nconst Emoji = styled.span`\n  font-size: 2rem;\n`\n\nfunction Cards(props) {\n  const [cards, setCards] = useState([])\n  // eslint-disable-next-line no-unused-vars\n  const [firstSelectedItem, setFirstSelectedItem] = useState(null)\n  const [score, setScore] = useState(0)\n  const { emojiCount } = props\n\n  useEffect(() => {\n    const temp = []\n    for (let i = 0; i < emojiCount; i++) {\n      temp.push({\n        emoji: EmojiRepository[i],\n        isActive: false,\n        canBeClicked: true\n      })\n      temp.push({\n        emoji: EmojiRepository[i],\n        isActive: false,\n        canBeClicked: true\n      })\n    }\n    setCards(SHUFFLE_ARRAY(temp))\n  }, [emojiCount])\n\n  const handleCardClick = (index) => {\n    const cardsCopy = [...cards]\n\n    if (firstSelectedItem === index || !cards[index].canBeClicked) {\n      // card that was revealed was clicked\n      cardsCopy[firstSelectedItem] = {\n        ...cardsCopy[firstSelectedItem],\n        isActive: false\n      }\n      setCards(cardsCopy)\n      setFirstSelectedItem(null)\n\n      props.showSnackbar(MESSAGE_SAME_CARD)\n    } else if (firstSelectedItem || firstSelectedItem === 0) {\n      if (cards[firstSelectedItem].emoji === cards[index].emoji) {\n        // right answer select current and first item to unclickable\n        cardsCopy[firstSelectedItem] = {\n          ...cardsCopy[firstSelectedItem],\n          isActive: true,\n          canBeClicked: false\n        }\n        cardsCopy[index] = {\n          ...cardsCopy[index],\n          isActive: true,\n          canBeClicked: false\n        }\n        setCards(cardsCopy)\n        setScore(score + 1)\n\n        props.showSnackbar(\n          POSITIVE_REINFORCEMENTS[\n            Math.floor(Math.random() * POSITIVE_REINFORCEMENTS.length)\n          ]\n        )\n        setFirstSelectedItem(null)\n\n        // game over\n        if (score === emojiCount - 1) props.setShouldTimerRun(false)\n      } else {\n        // wrong answer disable both\n        cardsCopy[firstSelectedItem] = {\n          ...cardsCopy[firstSelectedItem],\n          isActive: false\n        }\n\n        cardsCopy[index] = {\n          ...cardsCopy[index],\n          isActive: true\n        }\n\n        setCards(cardsCopy)\n\n        props.showSnackbar(\n          NEGATIVE_REINFORCEMENTS[\n            Math.floor(Math.random() * NEGATIVE_REINFORCEMENTS.length)\n          ]\n        )\n      }\n      setFirstSelectedItem(index)\n    } else {\n      // set first selected card\n      cardsCopy[index] = { ...cardsCopy[index], isActive: true }\n      setCards(cardsCopy)\n\n      setFirstSelectedItem(index)\n    }\n  }\n\n  const makeCard = () => {\n    const temp = []\n    for (let i = 0; i < cards.length; i++) {\n      temp.push(\n        <Card\n          className={cards[i].isActive || !cards[i].canBeClicked ? 'selected' : ''}\n          key={i}\n          onClick={() => {\n            handleCardClick(i)\n          }}\n        >\n          {cards[i].isActive || !cards[i].canBeClicked ? (\n            <Emoji role=\"img\">{cards[i].emoji}</Emoji>\n          ) : (\n            <div />\n          )}\n        </Card>\n      )\n    }\n    return temp\n  }\n\n  return <div className=\"cards-wrapper\">{makeCard()}</div>\n}\n\nCards.propTypes = {\n  emojiCount: PropTypes.number,\n  showSnackbar: PropTypes.func,\n  setShouldTimerRun: PropTypes.func\n}\n\nCards.defaultProps = {\n  emojiCount: 4,\n  showSnackbar: null,\n  setShouldTimerRun: null\n}\n\nexport default withTheme(Cards)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { withTheme } from 'styled-components'\n\nconst SnackbarBody = styled.div`\n  min-width: 250px;\n  visibility: hidden;\n  margin-left: -125px;\n  color: #fff;\n  text-align: center;\n  background: ${(props) => props.theme.colorSeconday};\n  box-shadow: ${(props) => props.theme.primaryBoxShadow};\n  border-radius: ${(props) => props.theme.radius};\n  padding: ${(props) => props.theme.padding};\n  padding: 16px;\n  position: fixed;\n  z-index: 1;\n  left: 50%;\n  bottom: 30px;\n  font-size: 1rem;\n\n  &.show {\n    visibility: visible !important;\n    -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\n    animation: fadein 0.5s, fadeout 0.5s 2.5s;\n  }\n`\n\nfunction Snackbar(props) {\n  const { isActive, message } = props\n\n  return <SnackbarBody className={isActive ? 'show' : ''}>{message}</SnackbarBody>\n}\n\nSnackbar.propTypes = {\n  isActive: PropTypes.bool,\n  message: PropTypes.string\n}\n\nSnackbar.defaultProps = {\n  isActive: false,\n  message: ''\n}\n\nexport default withTheme(Snackbar)\n","import React, { useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport Contols from './components/controls'\nimport theme from './utils/theme'\nimport Cards from './components/cards'\nimport Snackbar from './components/snackbar'\n\n/**\n * Wrappers classes for this component is defined in style.css\n */\n\nfunction App() {\n  const [emojiCount, setEmojiCount] = useState(4)\n  const [shouldTimerRun, setShouldTimerRun] = useState(true)\n  const [snackbarState, setSnackbarState] = useState({\n    isActive: false,\n    message: 'demo'\n  })\n\n  const showSnackbar = (message) => {\n    if (snackbarState.isActive) return\n\n    setSnackbarState({\n      isActive: true,\n      message\n    })\n\n    setTimeout(() => {\n      setSnackbarState({\n        isActive: false,\n        message: 'demo'\n      })\n    }, 3000)\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"controls-wrapper\">\n        <Contols\n          setEmojiCount={setEmojiCount}\n          showSnackbar={showSnackbar}\n          setShouldTimerRun={setShouldTimerRun}\n          shouldTimerRun={shouldTimerRun}\n        />\n      </div>\n      <Cards\n        emojiCount={emojiCount}\n        showSnackbar={showSnackbar}\n        setShouldTimerRun={setShouldTimerRun}\n      />\n      <Snackbar isActive={snackbarState.isActive} message={snackbarState.message} />\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}